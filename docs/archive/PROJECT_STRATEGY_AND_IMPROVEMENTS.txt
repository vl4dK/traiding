
Проект: Автоматическая ML-стратегия для трейдинга на Kraken

---

1. Описание проекта

Данный проект — это автоматизированная система для алгоритмического трейдинга криптовалютой на бирже Kraken с использованием машинного обучения (ML). Процесс включает выбор наиболее ликвидных и волатильных торговых пар, загрузку и обновление исторических данных, обучение ML-модели для прогнозирования вероятности движения цены, а также генерацию торговых приказов в автоматическом или dry-run режиме.

---

2. Основные этапы стратегии

1.1. Автоматический выбор торговых пар
- Ежедневно из десятка доступных пар выбираются три лучшие по метрикам: объём, волатильность, минимальный спред (по данным Kraken Ticker API).

1.2. Загрузка и обновление данных
- Для выбранных пар выгружается история свечей (OHLCV, интервал 1 минута) за 6–12 месяцев через Kraken OHLC API.
- Данные хранятся в локальной базе SQLite (по одной таблице на пару).
- Обновление данных происходит ежедневно или по расписанию — добавляются только новые свечи.

1.3. Feature engineering
- Формируются признаки только на основе цены и объёма (OHLCV), без использования классических индикаторов (RSI, MACD и т.п.).
- Примеры признаков: размер тела свечи, диапазон, волатильность, относительное изменение объёма, скользящие средние по цене и объёму, rolling-метрики.
- Возможно агрегирование фичей с разных таймфреймов (5m, 15m, 1h) для учёта тренда.

1.4. Обучение/переобучение ML-модели
- Модель (например, XGBoostClassifier) обучается на исторических данных по задаче классификации: "buy/sell/hold".
- Целевая переменная: рост/падение/флэт цены в ближайшем горизонте.
- Обновление модели раз в сутки на свежих данных.

1.5. Прогнозирование и торговое решение
- Получив новые данные, модель рассчитывает вероятности действия.
- Если вероятность (buy/sell) выше порога (например, 0.8) — система готовит торговый приказ (dry-run или реальный).
- Все действия логируются, сигналы и результаты хранятся в базе для анализа.

1.6. Безопасность и этапы внедрения
- На старте система работает только в режиме dry-run (эмуляция торговли без реальных сделок).
- После проверки и тестов возможно включение режима реальной торговли.

---

3. Рекомендации по улучшению

3.1. Расширение набора признаков
- Добавить derived-фичи: volume spikes, divergence, rolling mean/std по разным таймфреймам.
- Учесть фичи для обнаружения аномалий (тени свечей, отклонения от VWAP, относительная активность).

3.2. Детектирование рыночных манипуляций
- Встроить модуль обнаружения аномалий (Isolation Forest, Autoencoder) для фильтрации подозрительных свечей.
- Блокировать сделки на аномальных участках рынка.

3.3. Модульная архитектура
- Вынести загрузку, feature engineering, ML, прогнозирование и исполнение в отдельные модули (классы/файлы).
- Упростить тестирование и обновление каждого компонента.

3.4. Встроенный backtest
- Добавить быстрый backtest для проверки стратегии на истории.
- Хранить результаты (PnL, drawdown, winrate) для анализа и оптимизации.

3.5. Мониторинг и визуализация
- Подключить web-дэшборд (Flask, Streamlit) для мониторинга состояния, логов, отчётов.
- Реализовать Telegram/Email-уведомления для контроля сигналов и ошибок.

3.6. Гибкость и развитие
- Сохранять расширяемость для добавления новых моделей (LightGBM, CatBoost, LSTM, RL-агент).
- Поддерживать dry-run режим до полной проверки устойчивости системы.

---

4. Преимущества выбранного подхода
- Максимальная автоматизация отбора активов, загрузки данных и принятия решений.
- Использование только ценовых и объёмных фичей (без запаздывающих индикаторов).
- Высокая гибкость и возможность масштабирования под новые рынки/пары/стратегии.
- Прозрачная, модульная архитектура и постоянный dry-run до вывода на реальный рынок.

---

Файл подготовлен с помощью ChatGPT (2024).
